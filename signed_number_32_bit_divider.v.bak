module signed_number_32_bit_divider (
    input clk,                      // Tín hiệu clock
    input rst_n,                    // Tín hiệu reset (active low)
    input start,                    // Tín hiệu bắt đầu phép chia
    input signed [31:0] dividend,   // Số bị chia
    input signed [31:0] divisor,    // Số chia
    output reg signed [31:0] quotient,  // Thương
    output reg signed [31:0] remainder, // Số dư
    output reg done                 // Tín hiệu hoàn thành
);

    reg [63:0] dividend_extended;   // Số bị chia mở rộng để lưu kết quả dịch bit
    reg [31:0] abs_dividend;        // Trị tuyệt đối của dividend
    reg [31:0] abs_divisor;         // Trị tuyệt đối của divisor
    reg [31:0] quotient_reg;        // Thương tạm thời
    reg [5:0] bit_count;            // Bộ đếm bit (đếm 32 bước)
    reg running;                    // Trạng thái đang thực thi phép chia
    reg sign_result;                // Dấu của thương

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            // Reset toàn bộ trạng thái
            quotient <= 0;
            remainder <= 0;
            done <= 0;
            dividend_extended <= 0;
            abs_dividend <= 0;
            abs_divisor <= 0;
            quotient_reg <= 0;
            bit_count <= 0;
            running <= 0;
            sign_result <= 0;
        end else if (start && !running) begin
            // Bắt đầu phép chia
            running <= 1;
            done <= 0;
            bit_count <= 0;
            quotient_reg <= 0;

            // Xử lý chia cho 0
            if (divisor == 0) begin
                quotient <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx; // Báo lỗi chia cho 0
                remainder <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
                done <= 1;
                running <= 0;
            end else begin
                // Xác định dấu của thương (theo dấu của dividend)
                sign_result <= dividend[31]; // Thương cùng dấu với số bị chia

                // Tính trị tuyệt đối của số bị chia và số chia
                abs_dividend <= dividend[31] ? -dividend : dividend;
                abs_divisor <= divisor[31] ? -divisor : divisor;

                // Khởi tạo số bị chia mở rộng
                dividend_extended <= {32'b0, abs_dividend};
            end
        end else if (running) begin
            if (bit_count < 32) begin
                // Dịch trái dividend_extended và thực hiện phép trừ
                dividend_extended <= dividend_extended << 1;
                if (dividend_extended[63:32] >= abs_divisor) begin
                    dividend_extended[63:32] <= dividend_extended[63:32] - abs_divisor;
                    quotient_reg <= (quotient_reg << 1) | 1;
                end else begin
                    quotient_reg <= quotient_reg << 1;
                end
                bit_count <= bit_count + 1;
            end else begin
                // Kết thúc phép chia
                running <= 0;
                done <= 1;

                // Gán thương với dấu của số bị chia
                quotient <= sign_result ? -quotient_reg : quotient_reg;

                // Gán số dư với dấu của số bị chia
                remainder <= dividend[31] ? -dividend_extended[63:32] : dividend_extended[63:32];
            end
        end
    end
endmodule
